class MaxHeapPriorityQueue:
    def __init__(self):
        self.heap = []

    def get_parent(self, i):
        return (i - 1) // 2

    def get_left_child(self, i):
        return i * 2 + 1

    def get_right_child(self, i):
        return i * 2 + 2

    def extract_max(self):
        if len(self.heap) == 0:
            return None
        if len(self.heap) == 1:
            return self.heap.pop()
        max_value = self.heap[0]
        self.heap[0] = self.heap.pop()
        self.__heapify_down(0)
        return max_value

    def __heapify_down(self, i):
        largest = i
        left = self.get_left_child(i)
        right= self.get_right_child(i)
        if left < len(self.heap) and self.heap[i] < self.heap[left]:
            largest = left
        if right < len(self.heap) and self.heap[right] > self.heap[largest]:
            largest = right
        if largest != i:
            self.heap[i], self.heap[largest] = self.heap[largest], self.heap[i]
            self.__heapify_down(largest)

    def insert(self, value):
        self.heap.append(value)
        self.__heapify_up(len(self.heap) - 1)

    def __heapify_up(self, i):
        while i > 0 and self.heap[i] > self.heap[self.get_parent(i)]:
            self.heap[i], self.heap[self.get_parent(i)] = self.heap[self.get_parent(i)], self.heap[i]
            i = self.get_parent(i)


class MinHeapPriorityQueue:
    def __init__(self):
        self.heap = []

    def get_parent(self, i):
        return (i - 1) // 2

    def get_left_child(self, i):
        return i * 2 + 1

    def get_right_child(self, i):
        return i * 2 + 2

    def __heapify_down(self, i):
        smallest = i
        left = self.get_left_child(i)
        right = self.get_right_child(i)
        if left < len(self.heap) and self.heap[i] > self.heap[self.get_left_child(i)]:
            smallest = left
        if right < len(self.heap) and self.heap[right] < self.heap[smallest]:
            smallest = right
        if smallest != i:
            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i]
            self.__heapify_down(smallest)

    def extract_min(self):
        if len(self.heap) == 0:
            return None
        if len(self.heap) == 1:
            return self.heap.pop()
        min_value = self.heap[0]
        self.heap[0] = self.heap.pop()
        self.__heapify_down(0)
        return min_value

    def insert(self, value):
        self.heap.append(value)
        self.__heapify_up(len(self.heap) - 1)

    def __heapify_up(self, i):
        while i > 0 and self.heap[i] < self.heap[self.get_parent(i)]:
            self.heap[i], self.heap[self.get_parent(i)] = self.heap[self.get_parent(i)], self.heap[i]
            i = self.get_parent(i)


# Heap Sort
  
def max_heapify(arr, n, i):
    largest = i
    left = i * 2 + 1
    right = i * 2 + 2
    if left < n and arr[left] > arr[largest]:
        largest = left
    if right < n and arr[right] > arr[largest]:
        largest = right
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        max_heapify(arr, n, largest)

def build_max_heap(arr):
    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        max_heapify(arr, n, i)

def heap_sort(arr):
    build_max_heap(arr)
    for i in range(len(arr) - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        max_heapify(arr, i, 0)
